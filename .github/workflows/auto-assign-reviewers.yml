name: Auto Comment and Mention Reviewers Based on Labels

on:
  pull_request:
    types:
      - labeled
      - synchronize
      - opened

jobs:
  auto-comment:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Get PR labels and determine reviewers
      - name: Get PR labels and determine reviewers
        id: pr_labels
        run: |
          # Extract labels from the PR event payload
          LABELS="${{ github.event.pull_request.labels | map(attribute='name') | join(',') }}"
          echo "Labels: $LABELS"
          echo "::set-output name=labels::$LABELS"
          
          # Define reviewer mapping based on labels
          declare -A label_to_reviewers
          label_to_reviewers["BSP"]="@kurisaW"
          label_to_reviewers["Component"]="@kurisaW @Nedki-L"
          label_to_reviewers["action"]="@Nedki-L"
          
          # Dynamically select reviewers based on labels
          SELECTED_REVIEWERS=""
          for label in $(echo $LABELS | sed "s/,/ /g"); do
            if [[ -n "${label_to_reviewers[$label]}" ]]; then
              SELECTED_REVIEWERS="${SELECTED_REVIEWERS} ${label_to_reviewers[$label]}"
            fi
          done
          if [ -z "$SELECTED_REVIEWERS" ]; then
            SELECTED_REVIEWERS="No specific reviewers found"
          fi
          
          echo "::set-output name=reviewers::$SELECTED_REVIEWERS"

      # Step 3: Find and delete existing comment (if any)
      - name: Delete existing comment
        id: delete_comment
        run: |
          # Get existing comments
          COMMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments)

          # Extract comment ID (if it's an auto-comment)
          COMMENT_ID=$(echo "$COMMENTS" | jq '.[] | select(.body | contains("Hey")) | .id' | head -n 1)

          if [ -n "$COMMENT_ID" ]; then
            echo "Deleting existing comment with ID $COMMENT_ID"
            curl -X DELETE \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/issues/comments/$COMMENT_ID
          else
            echo "No existing comment found"
          fi

      # Step 4: Add a new comment with updated reviewers
      - name: Add comment with reviewers
        run: |
          REVIEWERS="${{ steps.pr_labels.outputs.reviewers }}"
          COMMENT_BODY="Hey ${REVIEWERS}, could you please review this PR? ðŸ˜Š"
          
          # Post the comment to GitHub Issues API
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments

      # Step 5: Error handling (Optional) - Notify failure if curl request fails
      - name: Check for errors
        if: failure()
        run: |
          echo "Error: Failed to add comment!"
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -d "{\"body\": \"Error occurred while attempting to comment on the PR.\"}" \
            https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments
